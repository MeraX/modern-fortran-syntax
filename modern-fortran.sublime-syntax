%YAML 1.2
---
name: BeautifulFortran
file_extensions: [F90,F08,F18,f90,f08,f18]
scope: source.fortran

variables:
  intrinsicType: '(real|integer|complex|character|logical|byte|double precision|double complex)'
  intrinsicAttribute: '(allocatable|asynchronous|automatic|bind|codimension|contiguous|dimension|
                        external|intent|intrinsic|optional|parameter|pointer|private|protected|
                        public|save|static|target|value|volatile)'
  firstOnLine: '^\s*'
  parenthesisStart: '\s*\(\s*'
  parenthesisEnd: '\s*\)\s*'

contexts:
  main:
    - include: comments 
    - include: types
    - include: attribute
    - include: operators
    - include: control
    - include: strings
    - include: continuation
    - include: procedures
    - include: modules
    - include: classdefinitions
    - include: separators

  comments:
    - match: "!"
      scope: punctuation.definition.comment
      push:
      - meta_scope: comment.line
      - match: \n 
        pop: true

  types:
    - match: '\b{{intrinsicType}}\b'
      scope: storage.type
      push: declaration
    - match: '\b(type|class){{parenthesisStart}}\s*(\w*){{parenthesisEnd}}'
      captures:
        1: storage.type.class
        2: entity.name.class
      push: declaration

  attribute:
    - match: '\b{{intrinsicAttribute}}\b'
      scope: storage.modifier

  operators:
    - match: (==|/=|>=|<=|<|>)
      scope: keyword.operator.logical
    - match: (\.and\.|\.or\.|\.ne\.|\.lt\.|\.leq\.|\.gt\.|\.geq\.|\.eq\.)
      scope: keyword.operator.word
    - match: (=>)
      scope: keyword.operator
    - match: (\*|\+|-|/)
      scope: keyword.operator.arithmetic

  separators:
    - match: '(::)'
      scope: keyword.separator

  control:
    # if ()
    - match: '{{firstOnLine}}(if){{parenthesisStart}}'
      captures:
        1: keyword.control.conditional
      push: condition-parser
    # then
    - match: '\b(then)\b'
      scope: keyword.control.conditional
    # elseif ()
    - match: '{{firstOnLine}}(else)\s*(if)'
      captures:
        1: keyword.control.conditional
        2: keyword.control.conditional
    # else
    - match: '{{firstOnLine}}*(else)\b'
      scope: keyword.control.conditional
    # endif
    - match: '{{firstOnLine}}(end\s*if)\b'
      captures:
        1: keyword.control.conditional
    # do 
    - match: '{{firstOnLine}}(do)'
      captures:
        1: keyword.control.conditional
      push: do-loop
    # enddo
    - match: '{{firstOnLine}}(end\s*do)\b'
      captures:
        1: keyword.control

  do-loop:
    - match: '\b(while)({{parenthesisStart}})'
      captures:
        1: keyword.control
      push: condition-parser
    - match: '\s+(\w*)\s*(\=)'
      captures:
        1: variable.other
        2: keyword.operator
      pop: true
    - include: newline-pop

  condition-parser:
    - include: main
    - match: '{{parenthesisEnd}}'
      pop: true

  newline-pop:
    - match: '\n'
      pop: true     

  declaration:
    - include: attribute
    - include: operators
    - include: separators
    - match: '\b(in|out|inout)\b'
      scope: keyword.other
    - match: '\n'
      pop: true

  continuation:
    - match: "&"
      scope: punctuation.separator.continuation

  strings:
    - match: "//"
      scope: keyword.operator.arithmetic
    - match: "'"
      push: string.single 
    - match: '"'
      push: string.double

  string.single:
    - meta_scope: string.quoted.single
    - include: string.continuation
    - include: newline-pop
    - match: "'"
      pop: true

  string.double:
    - meta_scope: string.quoted.single
    - include: string.continuation
    - include: newline-pop 
    - match: '"'
      pop: true

  string.continuation:
    - match: "&"
      scope: punctuation.separator.continuation
      push: 
        # locate continuation on next line and pop
        - match: "&" 
          scope: punctuation.separator.continuation 
          pop: true 

  procedures:
    - match: \s*(result) 
      scope: keyword.control

    - match: \b(pure)\b
      scope: storage.modifier

    - match: (implicit none)
      scope: keyword.control

    - match: (end)
      scope: keyword.control

    - match: (module|)\s*\b(function|subroutine)\b\s*(\w*)(\(|)
      captures:
        1: storage.modifier
        2: keyword.declaration.function
        3: entity.name.function 
      push: argument.parser   

  argument.parser:
    - include: arithmetics
    - include: comments
    - match: (\w*)
      captures: 
        1: variable.other
    - match: ","
      scope: punctuation.separator
    - match: "&"
      scope: punctuation.separator.continuation
      push: argument.parser
    - match: \n
      pop: true
    - match: \)
      pop: true

  modules:
    - match: '\b(module)\b\s*(\w*)$'
      captures: 
        1: keyword.declaration.interface
        2: entity.name.interface
    - match: \b(submodule)\b\s*\((\w*)\)\s*(\w*)
      captures:
        1: keyword.declaration.interface
        2: entity.name.interface
        3: entity.name.interface
    - match: \b(submodule)\b\s*(\w*)
      captures:
        1: keyword.declaration.interface
        2: entity.name.interface

  classdefinitions:
    - match: '\b(type)(?!{{parenthesisStart}})'
      scope: storage.type.class
      push: class.name
    - match: '(end)\s+(type)\s(\w*)'
      captures:
        1: storage.type.class
        2: storage.type.class
        3: entity.name.class
    - match: (procedure)
      scope: keyword.declaration.interface
    - match: (contains)
      scope: keyword.declaration.interface

  class.name:
    - include: newline-pop
    - match: '\b(extends)\b{{parenthesisStart}}(\w*){{parenthesisEnd}}'
      captures:
        1: keyword.operator
        2: entity.other.inherited-class
    - match: '\b(abstract)\b'
      scope: storage.modifier
    - match: '(::)\s*(\w*)'
      captures:
        1: keyword.separator
        2: entity.name.class
