%YAML 1.2
---
name: BeautifulFortran
file_extensions: [F90,F08,F18,f90,f08,f18]
scope: source.fortran

variables:
  intrinsicType: '(real|integer|complex|character|logical|byte|double precision|double complex)'
  intrinsicAttribute: '(allocatable|asynchronous|automatic|bind|codimension|contiguous|dimension|external|intent|intrinsic|optional|parameter|pointer|private|protected|public|save|static|target|value|volatile|deferred|pass|nopass|overridable|non_overridable)'
  intrinsicFunction: '(abs|achar|acos|acosh|adjustl|adjustr|aimag|aint|all|allocated|anint|any|asin|asinh|associated|atan|atan2|atanh|atomic_add|atomic_and|atomic_cas|atomic_define|atomic_fetch_add|atomic_fetch_and|atomic_fetch_or|atomic_fetch_xor|atomic_or|atomic_ref|atomic_xor|bessel_j0|bessel_j1|bessel_jn|bessel_y0|bessel_y1|bessel_yn|bge|bgt|bit_size|ble|bit|btest|c_associated|c_funloc|c_f_pointer|c_f_procpointer|c_loc|c_sizeof|ceiling|char|cmplx|co_broadcast|co_max|co_min|co_reduce|co_sum|command_argument_count|compiler_options|compiler_version|conjg|cos|cosh|count|cpu_time|cshift|date_and_time|dble|digits|dim|dot_product|dprod|dshiftl|dshiftr|eoshift|epsilon|erf|erfc|erfc_scaled|event_query|execute_command_line|exp|exponent|extends_type_of|float|floor|fraction|gamma|get_command|get_command_argument|get_environment_variable|huge|hypot|iachar|iall|iand|iany|ibclr|ibits|ibset|ichar|ieor|image_index|index|int|ior|iparity|is_iostat_end|is_iostat_eor|ishft|isfhtc|kind|lbound|lcobound|leadz|len|len_trim|lge|lgt|lle|llt|log|log10|log_gamma|logical|maskl|maskr|matmul|max|maxexponent|maxloc|maxval|merge|merge_bits|min|minexponent|minloc|minval|mod|module|move_alloc|mvbits|nearest|new\_line|nint|not|norm2|null|num_images|pack|parity|popcnt|poppar|precision|present|product|radix|random_number|random_seed|range|rank|real|repeat|reshape|rrspacing|same_type_as|scale|scan|selected_char_kind|selected_int_kind|selected_real_kind|set_exponent|shape|shifta|shiftl|shiftr|sign|sin|sinh|size|sngl|spacing|spread|sqrt|storage_size|sum|system_clock|tan|tanh|this_image|tiny|trailz|transfer|transpose|trim|ubound|ucobound|unpack|verify)'
  intrinsicIO: '(print|write|read|inquire|open|close|rewind|backspace|endfile|flush|namelist)'

  firstOnLine: '^\s*'
  parenthesisStart: '\(\s*'
  parenthesisEnd: '\s*\)'
  variableMatch: '[A-Za-z_][A-Za-z_0-9]*'
  ompDirectives: '(end|parallel|do|simd|single|target|update|workshare|declare|sections|distribute|teams|task|taskyield|master|critical|barrier|taskwait|taskgroup|atomic|flush|ordered|cancel|cancellation point|reduction)'
  ompIntrinsics: (omp_set_num_threads|omp_get_num_threads|omp_get_max_threads|omp_get_thread_num|omp_get_num_procs|omp_in_parallel|omp_set_dynamic|omp_get_dynamic|omp_get_cancellation|omp_set_nested|omp_get_nested|omp_set_schedule|omp_get_schedule|omp_get_thread_limit|omp_set_max_active_levels|omp_get_max_active_levels|omp_get_level|omp_get_ancestor_thread_num|omp_get_team_size|omp_get_active_level|omp_in_final|omp_get_proc_bind|omp_set_default_device|omp_get_default_device|omp_get_num_devices|omp_get_num_teams|omp_get_team_num|omp_is_initial_device|omp_init_lock|omp_init_nest_lock|omp_destroy_lock|omp_destroy_nest_lock|omp_set_lock|omp_set_nest_lock|omp_unset_lock|omp_unset_nest_lock|omp_test_lock|omp_test_nest_lock|omp_get_wtime|omp_get_wtick)
  ompClauses: (default|shared|private|firstprivate|lastprivate|linear|reduction|copyin|copyprivate|map|tofrom|safelen|collapse|simdlen|aligned|uniform|Inbrach|notinbranch)

contexts:
  main:
    - include: comments 
    - include: types
    - include: attribute
    - include: operators
    - include: control
    - include: strings
    - include: continuation
    - include: procedures
    - include: modules
    - include: interfaces 
    - include: classdefinitions
    - include: separators
    - include: numbers
    - include: constants
    - include: function-parsing
    - include: matchVariable
    - include: omp

  comments:
    - match: '!(?![$])'
      scope: punctuation.definition.comment
      set:
      - meta_scope: comment.line
      - match: \n 
        pop: true

  types:
    - include: comments
    - include: strings
    - match: '{{firstOnLine}}\b{{intrinsicType}}\b'
      scope: storage.type
      push: declaration
    - match: '{{firstOnLine}}(type|class){{parenthesisStart}}\s*(\w*){{parenthesisEnd}}'
      captures:
        1: storage.type.class
        2: entity.name.class
      push: declaration

  attribute:
    - match: \b{{intrinsicAttribute}}\b
      scope: storage.modifier

  operators:
    - match: (==|/=|>=|<=|<|>)
      scope: keyword.operator.logical
    - match: (\.and\.|\.or\.|\.ne\.|\.lt\.|\.le\.|\.gt\.|\.ge\.|\.eq\.|\.not\.)
      scope: keyword.operator.word
    - match: (=>)
      scope: keyword.operator
    - match: (\*|\+|-|\/|=)
      scope: keyword.operator.arithmetic

  separators:
    - match: (::)
      scope: keyword.separator
    - match: (:)
      scope: keyword.separator
    - match: ','
      scope: punctuation.separator

  control:
    - include: comments
    # if ()
    - match: '{{firstOnLine}}(if)\s*{{parenthesisStart}}'
      captures:
        1: keyword.control.conditional
    # then
    - match: '\b(then)\b'
      scope: keyword.control.conditional
    # elseif ()
    - match: '{{firstOnLine}}(else)\s*(if)\b'
      captures:
        1: keyword.control.conditional
        2: keyword.control.conditional
    # else
    - match: '{{firstOnLine}}*(else)\b'
      scope: keyword.control.conditional
    # endif
    - match: '{{firstOnLine}}(end\s*if)\b'
      captures:
        1: keyword.control.conditional
    # do 
    - match: '{{firstOnLine}}(do)\b'
      captures:
        1: keyword.control.conditional
    - match: '(?<=[do])\s*(while)'
      scope: keyword.control.conditional
    # enddo
    - match: '{{firstOnLine}}(end\s*do)\b'
      captures:
        1: keyword.control

  newline-pop:
    - match: '\n'
      pop: true     

  declaration:
    - include: attribute
    - include: operators
    - include: separators
    - include: newline-pop
    - include: comments
    - include: strings
    - include: numbers
    - match: '\b(in|out|inout)\b' # E: we need to make this be keywords,
                                  # but dimension(a,b,c) should make 
                                  # a,b,c be variables - intent & dimension
                                  # should trigger different scopes
      scope: keyword.other 
    - include: function-parsing
    - include: matchVariable

  continuation:
    - match: "&"
      scope: punctuation.separator.continuation

  strings:
    - match: "//"
      scope: keyword.operator.arithmetic
    - match: "'"
      push: string.single 
    - match: '"'
      push: string.double

  string.single:
    - meta_scope: string.quoted.single
    - include: string.continuation
    - include: newline-pop
    - match: "'"
      pop: true

  string.double:
    - meta_scope: string.quoted.single
    - include: string.continuation
    - include: newline-pop 
    - match: '"'
      pop: true

  string.continuation:
    - match: "&"
      scope: punctuation.separator.continuation
      push: 
        # locate continuation on next line and pop
        - match: "&" 
          scope: punctuation.separator.continuation 
          pop: true 

  procedures:
    - match: \b({{intrinsicFunction}})\(
      captures: 
        1: variable.function

    - match: \s*(result)\s*\( 
      captures: 
        1: keyword.control

    - match: \b(pure)\b
      scope: storage.modifier

    - match: (implicit none)
      scope: keyword.control

    - match: (end)
      scope: keyword.control

    - match: (module|)\s*\b(function|subroutine)\b\s*(\w*)(\(|)
      captures:
        1: storage.modifier
        2: keyword.declaration.function
        3: entity.name.function  

    - match: '(call)'
      captures:
        1: keyword.control 
      push: function-parsing 

  modules:
    - match: \b(module)\b\s*(\w*)$
      captures: 
        1: keyword.declaration.interface
        2: entity.name.interface
    - match: \b(submodule)\b\s*\((\w*)\)\s*(\w*)
      captures:
        1: keyword.declaration.interface
        2: entity.name.interface
        3: entity.name.interface
    - match: \b(submodule)\b\s*(\w*)
      captures:
        1: keyword.declaration.interface
        2: entity.name.interface
    - match: (use)
      scope: keyword.control
    - match: (?<=[use])\s*(\w*)
      scope: entity.name.interface
    - match: (only)\s*(\:)
      captures:
        1: keyword.control
        2: punctuation.separator

  classdefinitions:
    - match: \b(type)(?!{{parenthesisStart}})
      scope: storage.type.class
      push: class.name
    - match: (procedure)
      scope: keyword.declaration.interface
    - match: (contains)
      scope: keyword.declaration.interface

  class.name:
    - include: newline-pop
    - match: \b(extends)\b{{parenthesisStart}}(\w*){{parenthesisEnd}}
      captures:
        1: keyword.operator
        2: entity.other.inherited-class
    - match: \b(abstract)\b
      scope: storage.modifier
    - match: (::)\s*(\w*)
      captures:
        1: keyword.separator
        2: entity.name.class
    - match: (?<=[end\s*type])(\w*)
      scope: entity.name.class

  numbers:
    - match: '\b(\d+[\.]?[\d+]?[d]?[\+|\-]?\d*)'
      captures: 
        1: constant.numeric

  constants:
    - match: (\.true\.|\.false\.)
      scope: constant.language

  function-parsing:
    - include: comments 
    - match: '(\w*)\('
      captures:
        1: variable.function
    - match: '(\w*)(\%)(\w*)\('
      captures:
        1: storage.type.class 
        2: punctuation.accessor
        3: variable.function
    - match: '(\w*)(\%)(\w*)'
      captures:
        1: storage.type.class 
        2: punctuation.accessor
        3: variable.other.member
    - include: newline-pop

  interfaces:
    - match: (abstract)\s*(?=interface)
      scope: storage.modifier
    - match: (interface)
      scope: keyword.declaration.interface
    - match: '(?<=[interface])\s*(\w*)'
      scope: entity.name.interface
    - match: (include)
      scope: keyword.control

  omp:
    - match: '{{firstOnLine}}(\!\$omp)'
      scope: support.function
      push: omp.line 
    - match: '{{firstOnLine}}(\!\$)'
      scope: support.function
      push: omp.line 

  omp.line:
    - include: omp.continuation
    - include: omp.directives
    - include: omp.intrinsic
    - include: omp.clauses
    - match: (schedule)
      scope: support.function
      push: omp.schedule
    - match: '\n'
      pop: true

  omp.directives:
    - match: ({{ompDirectives}})
      scope: support.function

  omp.intrinsic:
    - match: ({{ompIntrinsics}})
      scope: support.function

  omp.clauses:
    - include: omp.continuation
    - match: ({{ompClauses}})
      scope: support.constant

  omp.schedule:
    - include: omp.continuation
    - match: (static|dynamic|guided|auto)
      scope: support.constant
    - match: '{{parenthesisEnd}}'
      pop: true


  omp.continuation:
    - match: "&" 
      push:
        - match: '{{firstOnLine}}(\!\$omp)'
          scope: support.function
          pop: true

  matchVariable:
    - match: ({{variableMatch}})
      scope: variable.other




