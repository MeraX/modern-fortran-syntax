%YAML 1.2
---
name: BeautifulFortran
file_extensions: [F90,F08,F18,f90,f08,f18]
scope: source.fortran

variables:
  intrinsicType: '(real|integer|complex|character|logical|byte|double precision|double complex)'
  intrinsicAttribute: '(allocatable|asynchronous|automatic|bind|codimension|contiguous|dimension|
                        external|intent|intrinsic|optional|parameter|pointer|private|protected|
                        public|save|static|target|value|volatile)'
  parenthesisStart: '\s*\('
  parenthesisEnd: '\s*\)'
  firstOnLine: '^\s*'


contexts:
  main:
    - include: comments 
    - include: types
    - include: attribute
    - include: operators
    - include: control

  comments:
    - match: "!"
      push:
        - meta_scope: comment.line
        - match: \n
          pop: true

  types:
    - match: '\b{{intrinsicType}}\b'
      scope: storage.type

  attribute:
    - match: '\b{{intrinsicAttribute}}\b'
      scope: storage.modifier

  operators:
    - match: (==|/=|>=|<=|<|>)
      scope: keyword.operator.logical
    - match: (\.and\.|\.or\.|\.ne\.|\.lt\.|\.leq\.|\.gt\.|\.geq\.|\.eq\.)
      scope: keyword.operator.word
    - match: (=>)
      scope: keyword.operator

  control:
    # if ()
    - match: '{{firstOnLine}}(if){{parenthesisStart}}'
      captures:
        1: keyword.control.conditional
      push: condition-parser
    # then
    - match: '\b(then)\b'
      scope: keyword.control.conditional
    # elseif ()
    - match: '{{firstOnLine}}(else)\s*(if)'
      captures:
        1: keyword.control.conditional
        2: keyword.control.conditional
    # else
    - match: '{{firstOnLine}}*(else)\b'
      scope: keyword.control.conditional
    # endif
    - match: '{{firstOnLine}}(end\s*if)\b'
      captures:
        1: keyword.control.conditional
    # do 
    - match: '{{firstOnLine}}(do)'
      captures:
        1: keyword.control.conditional
      push: do-loop
    # enddo
    - match: '{{firstOnLine}}(end\s*do)\b'
      captures:
        1: keyword.control

  do-loop:
    - match: '\b(while)({{parenthesisStart}})'
      captures:
        1: keyword.control
      push: condition-parser
    - match: '\s+(\w*)\s*(\=)'
      captures:
        1: variable.other
        2: keyword.operator
      pop: true
    - include: newline-pop

  condition-parser:
    - include: main
    - match: '{{parenthesisEnd}}'
      pop: true

  newline-pop:
    - match: '\n'
      pop: true     